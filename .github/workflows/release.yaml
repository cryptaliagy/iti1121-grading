name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag-version: ${{ steps.get-version.outputs.tag-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get-version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "tag-version=$TAG_VERSION" >> $GITHUB_OUTPUT
          
          # Extract version from pyproject.toml
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$PYPROJECT_VERSION" >> $GITHUB_OUTPUT
          
          echo "Tag version: $TAG_VERSION"
          echo "PyProject version: $PYPROJECT_VERSION"

      - name: Validate version consistency
        run: |
          if [ "${{ steps.get-version.outputs.tag-version }}" != "${{ steps.get-version.outputs.version }}" ]; then
            echo "Error: Tag version (${{ steps.get-version.outputs.tag-version }}) does not match pyproject.toml version (${{ steps.get-version.outputs.version }})"
            exit 1
          fi
          echo "Version validation passed: ${{ steps.get-version.outputs.version }}"

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run linting
        run: poetry run ruff check .

      - name: Check formatting
        run: poetry run ruff format --check .

      - name: Run type checking
        run: poetry run mypy --follow-untyped-imports

      - name: Run tests
        run: poetry run pytest --cov=src --cov-report=xml

      - name: Build package
        run: poetry build

  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-test]
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, docker-build-and-push]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### Commits since $PREVIOUS_TAG" >> changelog.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG >> changelog.md
          else
            echo "### Initial Release" >> changelog.md
            git log --pretty=format:"- %s (%h)" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "### Docker Image" >> changelog.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-version.outputs.version }}\`" >> changelog.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> changelog.md
          
          # Output for use in release
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ needs.validate-version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.validate-version.outputs.version, '-') }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [validate-version, docker-build-and-push]
    permissions:
      security-events: write
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-version.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
